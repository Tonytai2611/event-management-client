name: Deploy Event Management Client

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE: tony26112004/event-management-client
  CONTAINER_NAME: event-management-client-container

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Run Build Test
        run: npm run build
        env:
          VITE_API_BASE_URL: http://localhost:8800
          VITE_CLIENT_URL: http://localhost:5173
          VITE_NODE_ENV: production

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          build-args: |
            VITE_API_BASE_URL=${{ secrets.EC2_API_URL }}
            VITE_CLIENT_URL=${{ secrets.EC2_CLIENT_URL }}
            VITE_NODE_ENV=production
          no-cache: true

  deploy:
    needs: build
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Pull Latest Image
        run: docker pull ${{ env.DOCKER_IMAGE }}:latest
        
      - name: Stop and Remove Old Container
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm ${{ env.CONTAINER_NAME }} || true
          
      - name: Remove Old Images
        run: |
          docker image prune -f
          
      - name: Run New Container
        run: |
          docker run -d \
            -p 80:80 \
            --name ${{ env.CONTAINER_NAME }} \
            --restart unless-stopped \
            ${{ env.DOCKER_IMAGE }}:latest
            
      - name: Verify Deployment
        run: |
          sleep 10
          docker ps | grep ${{ env.CONTAINER_NAME }}
          
      - name: Test Application
        run: |
          curl -f http://localhost/ || echo "Warning: Application not responding yet"

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üöÄ Event Management Client deployed to EC2"
            echo "üìç Access at: http://your-ec2-public-ip/"
          else
            echo "‚ùå Deployment failed!"
            echo "üîç Check logs for details"
          fi